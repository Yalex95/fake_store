generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
}

// -------- USER --------
model user {
  id       String  @id @default(uuid()) @db.Uuid
  name     String @db.VarChar(255)
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  isActive Boolean @default(true)
  role     Role    @default(USER) // user, admin, etc.
  email    String @unique @db.VarChar(255)
  avatar   String?

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  order    order[]    @relation("UserToOrder")
  address  address[]  @relation("UserToAddress")
  review   review[]   @relation("UserToReview")
  wishlist wishlist[] @relation("UserToWishlist")
  cart     cart[]     @relation("UserToCart")
}

// -------- CATEGORY --------
model category {
  id       String     @id @default(uuid()) @db.Uuid
  name     String?    @db.VarChar(255)
  slug     String     @unique @db.VarChar(255)
  parentId String?    @db.Uuid
  parent   category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children category[] @relation("CategoryHierarchy")

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  product_categories product_categories[] @relation("CategoryToProduct")
}

// -------- PRODUCT CAT --------
model product_categories {
  id         String @id @default(uuid()) @db.Uuid
  productId  String @db.Uuid
  categoryId String @db.Uuid

  product  product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category category @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
}

// -------- PRODUCT --------
model product {
  id String @id @default(uuid()) @db.Uuid

  name        String  @db.VarChar(255)
  description String? @db.Text
  rating      Float?
  slug        String  @unique @db.VarChar(255)

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  review   review[]
  wishlist wishlist[]
  variants product_variants[]
  category product_categories[]
}

// -------- PRODUCT LINK LIST (product variants) --------
model product_variants {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  name          String? @db.VarChar(255)
  url           String? @db.VarChar(500)
  image         String? @db.VarChar(500)
  altImage      String? @db.VarChar(500)
  standardPrice Float?
  salePrice     Float?
  color         String? @db.VarChar(100)
  isDefault     Boolean @default(false)

  createdAt DateTime        @default(now()) @db.Timestamp(6)
  updatedAt DateTime        @updatedAt @db.Timestamp(6)
  skus      variant_items[]
}

// -------- VARIANTS(size variants of a product) --------
model variant_items {
  id               String           @id @default(uuid()) @db.Uuid
  productVariantId String           @db.Uuid
  productVariant   product_variants @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  sku   String  @unique @db.VarChar(255) // Brand-category-model-color-size/variant
  size  String? @db.VarChar(50)
  stock Int?    @default(0)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  order_item order_item[]
  gallery    variant_images[]
  cart_item  cart_item[]
}

// -------- VIEW LIST() --------
model variant_images {
  id        String        @id @default(uuid()) @db.Uuid
  variantId String        @db.Uuid
  variant   variant_items @relation(fields: [variantId], references: [id], onDelete: Cascade)

  image_url String? @db.VarChar(500)

  @@unique([variantId, image_url])
}

// -------- CART -------- Save only if user is logged in
model cart {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   user   @relation("UserToCart", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  cart_item cart_item[]
}

// -------- CART ITEMS --------
model cart_item {
  id        String        @id @default(uuid()) @db.Uuid
  cartId    String        @db.Uuid
  cart      cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId String        @db.Uuid
  variant   variant_items @relation(fields: [variantId], references: [id], onDelete: Cascade)

  quantity Int @default(1)
}

// -------- ORDER --------
model order {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   user   @relation("UserToOrder", fields: [userId], references: [id], onDelete: Cascade)

  totalAmount     Float?
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  billingAddress  String?

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  order_item order_item[]
  shipment   shipment[]
  payment    payment[]

  @@index([userId])
}

// -------- ORDER ITEMS --------
model order_item {
  id        String        @id @default(uuid()) @db.Uuid
  orderId   String        @db.Uuid
  order     order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId String        @db.Uuid
  variant   variant_items @relation(fields: [variantId], references: [id])

  quantity Int    @default(1)
  price    Float

  @@index([orderId, variantId])
}

// -------- PAYMENT --------
model payment {
  id      String @id @default(uuid()) @db.Uuid
  orderId String @db.Uuid
  order   order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  provider      String?       @db.VarChar(100) // Ej. Stripe, PayPal
  status        PaymentStatus @default(PENDING)
  amount        Float?
  transactionId String?       @db.VarChar(255)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

// -------- SHIPMENT --------
model shipment {
  id      String @id @default(uuid()) @db.Uuid
  orderId String @db.Uuid
  order   order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  courier     String?        @db.VarChar(100) // DHL, FedEx
  tracking    String?        @db.VarChar(255)
  status      ShipmentStatus @default(PENDING)
  deliveredAt DateTime?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

// -------- USER ADDRESS --------
model address {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   user   @relation("UserToAddress", fields: [userId], references: [id], onDelete: Cascade)

  fullname String? @db.VarChar(255)
  street   String? @db.VarChar(255)
  city     String? @db.VarChar(255)
  state    String? @db.VarChar(255)
  country  String? @db.VarChar(255)
  zipCode  String? @db.VarChar(255)

  isDefault Boolean @default(false)

  @@index([userId])
}

// --------PRODUCT REVIEW --------
model review {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  user      user    @relation("UserToReview", fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.Uuid
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  rating  Float?    @default(0)
  comment String? @db.Text

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  @@unique([userId, productId]) // Ensure a user can only review a product once
  @@index([productId])
}

// -------- WISH LISTS --------
model wishlist {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  user      user    @relation("UserToWishlist", fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.Uuid
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  @@unique([userId, productId]) // Ensure a user can only have one wishlist entry per product
  @@index([userId, productId])
}

//NOTE: use cookie or session variables for user that dont sign in and save cart data to database when user logs in
